"""
Created on Sun Jan 14 19:29:11 2018

@author: Alberto Rosario
Explanations
"""

Question 1:
To quickly catch input errors without hurting efficiency too much, I decided to use a the if,else statement inside a try, catch.
I also took advantage of the itertools.permutation to make a list, 'perm', of all possible variations of 'sub_str' so I can quickly iterate through 'perm' to see if any anagrams of 'sub_str' are in 'main_str'.
The efficiency is approximatly O(n+4).

Question 2:
This problem can run at best O(1) if the entire input is a palindrome.
At worst the solution will run about O(nl).

Question 3:
This problem had a mayor step in complexity for me since there were several algorithms to choose from.
I chose Prim's Algorithm because I had never tried to implement it before and it seems to have the best efficiency for most cases.
My solution has an approximate efficiency O(n logn)

Question 4:
Decided to implement a slightly modified version of the Node() and BST() classes.
Also created a helper function to retrieve the LCA from the BST.
This solution is of the efficiency of about O(logn)

Question 5:
Solved with a LinkedList() class helper to create a LinkedList objects containing all Nodes.
The solution function, question5(ll, m), uses the mathematical strategy of two pointer.
One pointer is set ahead of the other by the value of m-1.
Then the leading and trailing pointers move together untill the leading finds reaches the end of the LinkedList.
An efficiency of O(n) is expected from this solution.
